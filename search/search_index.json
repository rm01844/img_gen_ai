{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 AI Image Generation API Documentation","text":"<p>Welcome to the AI Image Generation &amp; Editing API, powered by Google Vertex AI (Imagen Models) and deployed securely on Railway.</p> <p>This service allows developers to: - \ud83c\udfa8 Generate images from text prompts - \ud83e\ude84 Edit existing images using AI guidance - \ud83d\udd10 Access both web UI and REST API endpoints with token-based authentication</p>"},{"location":"#documentation-overview","title":"\ud83d\udcd8 Documentation Overview","text":"Section Description \ud83e\udde9 API Reference Details of each endpoint (<code>/generate</code>, <code>/edit</code>), request/response formats, and sample payloads \ud83e\uddf0 Application Overview Explains how the Flask app, Vertex AI integration, and authentication system work \ud83d\ude80 Deployment Guide Step-by-step guide for deploying to Railway or another cloud platform \ud83d\udcc4 OpenAPI Spec Swagger schema to auto-import into Postman / Insomnia / client SDKs"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#base-url","title":"Base URL","text":"<p>https://web-production-fc79.up.railway.app/</p> <p>All endpoints are relative to this base URL.</p>"},{"location":"#endpoints","title":"\ud83d\udd27 Endpoints","text":"Endpoint Method Description <code>/generate</code> POST Generate image(s) from text prompt <code>/edit</code> POST Edit uploaded image based on prompt <code>/login</code> GET/POST Superadmin login (OTP required) <code>/logout</code> GET End session"},{"location":"#available-models","title":"\ud83e\udde0 Available Models","text":"Function Model ID Version Provider Text \u2192 Image <code>imagen-4.0-generate-001</code> v4.0 Google Vertex AI Image \u2192 Image (Edit) <code>imagen-3.0-capability-001</code> v3.0 Google Vertex AI <p>\ud83e\udded Navigation For API details \u2192 start with API Reference</p> <p>For deployment or local setup \u2192 see Deployment Guide</p> <p>For technical app overview \u2192 see Application Structure</p> <p>For client-side import \u2192 use OpenAPI Spec</p>"},{"location":"deployment/","title":"Deployment Guide","text":""},{"location":"deployment/#docsdeploymentmd","title":"\ud83e\udde9 <code>docs/deployment.md</code>","text":""},{"location":"deployment/#deployment-guide","title":"\ud83d\ude80 Deployment Guide","text":"<p>This document explains how to deploy and configure the AI Image Generator API using Google Vertex AI and Flask.</p>"},{"location":"deployment/#environment-variables","title":"\ud83e\uddf0 Environment Variables","text":"<p>Create a <code>.env</code> file (or configure on Railway):</p> Variable Description Example <code>PROJECT_ID</code> Your Google Cloud project ID <code>your_project_ID</code> <code>LOCATION</code> Vertex AI region <code>us-central1</code> <code>SERVICE_KEY_JSON</code> JSON contents of the service account key <code>service account key (.json)</code> <code>API_TOKEN</code> Secret used for client API authentication <code>API_TOKEN</code> <code>SUPERADMIN_OTP</code> OTP for admin web login <code>custom_otp</code> <code>SECRET_KEY</code> Flask session encryption key <code>random_flask_secret</code> <code>PORT</code> App port <code>8080</code> <p>\u26a0\ufe0f Never commit <code>.env</code> or <code>.json</code> files to GitHub.</p>"},{"location":"deployment/#directory-structure","title":"\ud83e\uddf1 Directory Structure","text":"<pre><code>Img_gen_AI/\n\u251c\u2500\u2500 img_gen_ai/\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 templates/\n\u2502       \u251c\u2500\u2500 index.html\n\u2502       \u2514\u2500\u2500 login.html\n\u2514\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md \n\u2502   \u251c\u2500\u2500 reference/\n\u2502       \u2514\u2500\u2500 api.md\n\u2502       \u2514\u2500\u2500 app.md\n\u2502   \u2514\u2500\u2500 deployment.md\n\u251c\u2500\u2500 Procfile\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"deployment/#deployment-railway","title":"\u2699\ufe0f Deployment (Railway)","text":"<ol> <li>Push to GitHub</li> <li> <p>Ensure your <code>requirements.txt</code> and <code>Procfile</code> exist.</p> </li> <li> <p>Create Railway project</p> </li> <li>Connect GitHub repo.</li> <li> <p>Set environment variables in Settings \u2192 Variables.</p> </li> <li> <p>Build &amp; deploy    Railway auto-detects Flask from <code>Procfile</code>:</p> </li> </ol> <p>web: gunicorn img_gen_ai.app:app</p> <ol> <li>Access the app</li> </ol> <p>https://example.railway.app/login</p>"},{"location":"deployment/#security-checklist","title":"\ud83d\udd10 Security Checklist","text":"<ul> <li>[ ] Store tokens and service keys only in environment variables  </li> <li>[ ] Use long, random API tokens (\u2265 32 chars)  </li> <li>[ ] Rotate API tokens periodically  </li> <li>[ ] Restrict GCP service account to minimal permissions  </li> <li>[ ] Enable HTTPS (Railway provides automatically)</li> </ul>"},{"location":"deployment/#under-the-hood","title":"\ud83e\udde0 Under the Hood","text":"Component Purpose Flask Web framework and routing Vertex AI Imagen AI image generation and editing Google Service Account Authenticates your app with Vertex Gunicorn Production web server MkDocs Documentation generator"},{"location":"deployment/#verification","title":"\u2705 Verification","text":"<p>After deployment, test your API using: <pre><code>curl -X POST https://example.railway.app/api \\\n-H \"Authorization: Bearer &lt;YOUR_API_TOKEN&gt;\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"prompt\":\"a mountain landscape in watercolor\",\"number_of_images\":1}'\n</code></pre> Expected Response:</p> <p>{   \"image_urls\": [\"/static/generated_.png\"] }"},{"location":"deployment/#credits","title":"\ud83e\uddfe Credits","text":"<p>Google Cloud Vertex AI Imagen</p> <p>Flask for backend</p> <p>Railway.app for deployment</p> <p>MkDocs for documentation</p>"},{"location":"reference/api/","title":"\ud83e\udde0 AI Image Generation API","text":"<p>This API enables developers to generate and edit images using Google Vertex AI\u2019s Imagen models through a secure Flask REST interface.</p>"},{"location":"reference/api/#base-url","title":"\ud83d\udd17 Base URL","text":"<p>The application is deployed and hosted on Railway.app. This URL serves as the root endpoint for all API requests.</p> <p>Base URL: https://web-production-fc79.up.railway.app/</p> <p>Example: To access <code>/generate</code>, send a POST request to <code>https://web-production-fc79.up.railway.app/generate</code></p>"},{"location":"reference/api/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>All API endpoints require a valid Bearer token to be included in the request header. This token is used to authenticate and authorize client requests.</p> <p>Header Format:</p> <p>Authorization: Bearer"},{"location":"reference/api/#obtaining-the-token","title":"\ud83d\udd11 Obtaining the Token","text":"<p>Bearer tokens are provided by the API administrator upon onboarding. Each client or integration partner will receive a unique token associated with their account.</p> <p>If you have not received your token, please contact the API administrator or project owner.</p> <p>\u26a0\ufe0f Important: - Do not share your token publicly or embed it in client-side code. - Tokens are tied to your project identity and usage limits. - Rotate tokens periodically or immediately if compromised.</p>"},{"location":"reference/api/#example-authenticated-request","title":"\ud83e\udde9 Example: Authenticated Request","text":"<pre><code>curl -X POST https://web-production-fc79.up.railway.app/generate \\\n  -H \"Authorization: Bearer your_api_token_here\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"prompt\":\"a serene landscape with mountains and clouds\"}'\n</code></pre>"},{"location":"reference/api/#requirements","title":"\ud83d\udce6 Requirements","text":"<ul> <li>Python 3.10+</li> <li>Google Cloud Vertex AI API enabled and copy the API_TOKEN</li> <li>A service account key (.json) with the <code>Vertex AI User</code> and <code>Storage Admin</code> roles</li> <li>Railway.app or Render account for deployment</li> <li>MkDocs (optional) for documentation hosting</li> </ul>"},{"location":"reference/api/#endpoints","title":"\u2728 Endpoints","text":""},{"location":"reference/api/#post-generate","title":"POST /generate","text":"<p>Generate one or more images from a text prompt.</p> <p>Request Body</p> Field Type Required Description <code>prompt</code> string \u2705 Description of the image to generate <code>number_of_images</code> int \u274c Default: <code>1</code>, number of images to create <code>aspect_ratio</code> string \u274c Default: <code>\"1:1\"</code>, aspect ratio such as <code>16:9</code>, <code>3:4</code>, <code>9:16</code> <code>negative_prompt</code> string \u274c Optional text describing what to avoid <p>Example</p> <p>{   prompt: \"A futuristic city skyline at sunset\",   number_of_images: 2,   aspect_ratio: \"16:9\" }</p> <p>Response</p> <p>{   image_urls: [     \"/static/generated_8fa3b3.png\",     \"/static/generated_19df1d.png\"   ] }</p> <p>Underlying Model: imagen-4.0-generate-001 Provider: Google Vertex AI</p>"},{"location":"reference/api/#post-edit","title":"POST /edit","text":"<p>Edit or transform an uploaded image using a text prompt.</p> <p>Request (multipart/form-data)</p> Field Type Required Description <code>image</code> file \u2705 The source image to edit <code>prompt</code> string \u2705 The modification description <code>number_of_images</code> int \u274c Default: <code>1</code>, number of variations to return <p>Example </p> <pre><code>curl -X POST https://web-production-fc79.up.railway.app/edit \\\n  -H \"Authorization: Bearer &lt;YOUR_API_TOKEN&gt;\" \\\n  -F \"image=@castle.png\" \\\n  -F \"prompt=add fog and a dragon in the sky\" \\\n  -F \"number_of_images=2\"\n</code></pre> <p>Response</p> <p>{   image_urls: [     \"/static/edited_a13c0d.png\",     \"/static/edited_b28d9f.png\"   ] }</p> <p>Underlying Model: imagen-3.0-capability-001 Provider: Google Vertex AI</p>"},{"location":"reference/api/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n  A[Client / SDK / Postman] --&gt;|POST /generate or /edit| B[Flask API (Railway)]\n  B --&gt;|Bearer Token| C[Auth Middleware]\n  B --&gt;|Vertex API call| D[Google Imagen Models (v3/v4)]\n  D --&gt;|Base64 images| B\n  B --&gt;|JSON response| A\n</code></pre>"},{"location":"reference/api/#error-handling","title":"\u26a0\ufe0f Error Handling","text":"HTTP Code Meaning Example Cause 400 Bad Request Missing prompt or file 401 Unauthorized Invalid or missing token 404 Not Found Endpoint mismatch 500 Internal Error Vertex API or server issue <p>\ud83e\udde0 Notes</p> <ul> <li> <p>Images are saved temporarily under /static/.</p> </li> <li> <p>Watermarks may be applied by Vertex AI for compliance.</p> </li> <li> <p>The API auto-refreshes credentials from your GCP service account.</p> </li> </ul>"},{"location":"reference/app/","title":"\ud83e\udde9 AI Image Generator &amp; Editing \u2014 API Reference","text":"<p>This section documents all Flask routes and functions exposed by the backend.</p>"},{"location":"reference/app/#img_gen_ai.app--ai-image-generator-api","title":"AI Image Generator API","text":"<p>A Flask application that provides endpoints to generate and edit images using Google Vertex AI's Imagen models.</p> <p>This module includes authentication, text-to-image generation, and image-editing endpoints.</p>"},{"location":"reference/app/#img_gen_ai.app.login_required","title":"login_required","text":"<pre><code>login_required(f)\n</code></pre> <p>Decorator that restricts access to logged-in admin users.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>def login_required(f):\n    \"\"\"Decorator that restricts access to logged-in admin users.\"\"\"\n    from functools import wraps\n\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not session.get(\"logged_in\"):\n            flash(\"Please log in to access the generator.\", \"warning\")\n            return redirect(url_for(\"login\"))\n        return f(*args, **kwargs)\n    return decorated_function\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.login","title":"login","text":"<pre><code>login()\n</code></pre> <p>Superadmin login page with OTP validation.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>Renders the login form or redirects to the index if OTP is valid.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login() -&gt; Response:\n    \"\"\"Superadmin login page with OTP validation.\n\n    Returns:\n        Response: Renders the login form or redirects to the index if OTP is valid.\n    \"\"\"\n    stored_otp = (os.getenv(\"SUPERADMIN_OTP\") or \"\").strip().replace(\n        \"\\n\", \"\").replace(\"\\r\", \"\").replace(\" \", \"\")\n\n    if request.method == \"POST\":\n        entered_otp = (request.form.get(\"otp\") or \"\").strip().replace(\n            \"\\n\", \"\").replace(\"\\r\", \"\").replace(\" \", \"\")\n        print(\n            f\"\ud83d\udd0d DEBUG OTP | Entered='{entered_otp}' | Stored='{stored_otp}' | Match={entered_otp == stored_otp}\")\n\n        if entered_otp == stored_otp:\n            session.permanent = True\n            session[\"is_admin\"] = True\n            print(\"\u2705 OTP accepted \u2014 redirecting to index.\")\n            return redirect(url_for(\"index\"))\n        else:\n            print(\"\u274c Invalid OTP entered.\")\n            return render_template_string(\"\"\"\n                &lt;!DOCTYPE html&gt;\n                &lt;html lang=\"en\"&gt;\n                &lt;head&gt;\n                    &lt;meta charset=\"UTF-8\"&gt;\n                    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n                    &lt;title&gt;Invalid OTP&lt;/title&gt;\n                    &lt;style&gt;\n                        body { font-family: Arial; text-align: center; margin-top: 100px; }\n                        a { color: #007bff; text-decoration: none; }\n                    &lt;/style&gt;\n                &lt;/head&gt;\n                &lt;body&gt;\n                    &lt;h2 style='color:red;'&gt;Invalid OTP&lt;/h2&gt;\n                    &lt;a href='/login'&gt;Try again&lt;/a&gt;\n                &lt;/body&gt;\n                &lt;/html&gt;\n            \"\"\")\n\n    return render_template_string(\"\"\"\n        &lt;!DOCTYPE html&gt;\n        &lt;html lang=\"en\"&gt;\n        &lt;head&gt;\n            &lt;meta charset=\"UTF-8\"&gt;\n            &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n            &lt;title&gt;Superadmin Login&lt;/title&gt;\n            &lt;style&gt;\n                body { \n                    font-family: Arial, sans-serif; \n                    display: flex; \n                    flex-direction: column; \n                    align-items: center; \n                    justify-content: center; \n                    height: 100vh; \n                    background-color: #121212;\n                    color: white;\n                }\n                input, button {\n                    padding: 10px; \n                    margin: 10px;\n                    border: none;\n                    border-radius: 6px;\n                }\n                input {\n                    width: 200px;\n                    text-align: center;\n                }\n                button {\n                    background-color: #4CAF50;\n                    color: white;\n                    cursor: pointer;\n                }\n                button:hover {\n                    background-color: #45a049;\n                }\n            &lt;/style&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;form method=\"POST\"&gt;\n                &lt;h2&gt;Enter Superadmin OTP&lt;/h2&gt;\n                &lt;input type=\"password\" name=\"otp\" placeholder=\"Enter OTP\" required&gt;\n                &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/body&gt;\n        &lt;/html&gt;\n    \"\"\")\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.restrict_access","title":"restrict_access","text":"<pre><code>restrict_access()\n</code></pre> <p>Restrict access to authorized users only.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.before_request\ndef restrict_access() -&gt; Response | None:\n    \"\"\"Restrict access to authorized users only.\"\"\"\n    if request.endpoint not in (\"login\", \"static\") and not session.get(\"is_admin\"):\n        return redirect(url_for(\"login\"))\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.index","title":"index","text":"<pre><code>index()\n</code></pre> <p>Render the main web interface.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.route(\"/\")\ndef index() -&gt; Response:\n    \"\"\"Render the main web interface.\"\"\"\n    return render_template(\"index.html\")\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.generate_image","title":"generate_image","text":"<pre><code>generate_image()\n</code></pre> <p>Generate image(s) using Vertex AI Imagen model.</p> <p>This endpoint generates one or more images based on the user's prompt and options.</p> <p>Request Body (JSON):     prompt (str): The image description to generate.     number_of_images (int, optional): Number of images to generate (default=1).     aspect_ratio (str, optional): Aspect ratio, e.g. \"1:1\" or \"16:9\".     negative_prompt (str, optional): Objects/concepts to avoid.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>JSON containing a list of image URLs or an error message.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.route(\"/generate\", methods=[\"POST\"])\ndef generate_image() -&gt; Response:\n    \"\"\"Generate image(s) using Vertex AI Imagen model.\n\n    This endpoint generates one or more images based on the user's prompt and options.\n\n    Request Body (JSON):\n        prompt (str): The image description to generate.\n        number_of_images (int, optional): Number of images to generate (default=1).\n        aspect_ratio (str, optional): Aspect ratio, e.g. \"1:1\" or \"16:9\".\n        negative_prompt (str, optional): Objects/concepts to avoid.\n\n    Returns:\n        Response: JSON containing a list of image URLs or an error message.\n    \"\"\"\n    try:\n        data = request.get_json()\n        prompt = data.get(\"prompt\")\n        number_of_images = data.get(\"number_of_images\", \"1\")\n        aspect_ratio = data.get(\"aspect_ratio\", \"1:1\")\n        negative_prompt = data.get(\"negative_prompt\", \"\")\n\n        if not prompt:\n            return jsonify({\"error\": \"No prompt provided\"}), 400\n\n        # Load Imagen model\n        model = ImageGenerationModel.from_pretrained(\"imagen-4.0-generate-001\")\n\n        # Generate image\n        result = model.generate_images(\n            prompt=prompt,\n            number_of_images=int(number_of_images),\n            aspect_ratio=aspect_ratio,\n            negative_prompt=negative_prompt,\n            person_generation=\"allow_all\",\n            safety_filter_level=\"block_few\",\n            add_watermark=True,\n        )\n\n        # Save image to static folder\n        image_urls = []\n        for img in result.images:\n            filename = f\"generated_{uuid.uuid4().hex}.png\"\n            output_path = os.path.join(\"static\", filename)\n            img.save(output_path)\n            image_urls.append(f\"/{output_path}?v={int(time.time())}\")\n\n        # Return image URL with timestamp (cache-buster)\n        return jsonify({\"image_urls\": image_urls})\n\n    except Exception as e:\n        print(\"Error:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.edit_image","title":"edit_image","text":"<pre><code>edit_image()\n</code></pre> <p>Edit an uploaded image using Vertex AI Imagen model.</p> <p>This endpoint accepts an image file and prompt to generate edited variants.</p> Request Form Data <p>image (file): The uploaded image file to modify. prompt (str): The description of desired changes. number_of_images (int, optional): Number of variations to generate.</p> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>JSON containing a list of edited image URLs.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.route(\"/edit\", methods=[\"POST\"])\ndef edit_image() -&gt; Response:\n    \"\"\"Edit an uploaded image using Vertex AI Imagen model.\n\n    This endpoint accepts an image file and prompt to generate edited variants.\n\n    Request Form Data:\n        image (file): The uploaded image file to modify.\n        prompt (str): The description of desired changes.\n        number_of_images (int, optional): Number of variations to generate.\n\n    Returns:\n        Response: JSON containing a list of edited image URLs.\n    \"\"\"\n    try:\n        prompt = request.form.get(\"prompt\", \"\").strip() or \"Modify this image\"\n        number_of_images = int(request.form.get(\"number_of_images\", 1))\n\n        if \"image\" not in request.files:\n            return jsonify({\"error\": \"No image uploaded\"}), 400\n\n        # Save uploaded file temporarily\n        uploaded = request.files[\"image\"]\n        temp_path = os.path.join(\n            tempfile.gettempdir(), f\"upload_{uuid.uuid4().hex}.png\")\n        uploaded.save(temp_path)\n\n        # Read + base64 encode\n        with open(temp_path, \"rb\") as f:\n            img_b64 = base64.b64encode(f.read()).decode(\"utf-8\")\n\n        # \u2705 Construct REST request body correctly\n        body = {\n            \"instances\": [\n                {\n                    \"prompt\": prompt,\n                    \"referenceImages\": [\n                        {\n                            \"referenceType\": \"REFERENCE_TYPE_RAW\",\n                            \"referenceId\": 1,\n                            \"referenceImage\": {\n                                \"bytesBase64Encoded\": img_b64\n                            }\n                        }\n                    ],\n                }\n            ],\n            # \u2705 `parameters` moved to top level\n            \"parameters\": {\n                \"sampleCount\": number_of_images\n            },\n        }\n\n        headers = {\n            \"Authorization\": f\"Bearer {credentials.token}\",\n            \"Content-Type\": \"application/json\",\n        }\n\n        response = requests.post(ENDPOINT, headers=headers, json=body)\n        response.raise_for_status()\n        result = response.json()\n\n        # Save results\n        image_urls = []\n        for pred in result.get(\"predictions\", []):\n            data_b64 = pred.get(\"bytesBase64Encoded\")\n            if not data_b64:\n                continue\n            filename = f\"edited_{uuid.uuid4().hex}.png\"\n            out_path = os.path.join(\"static\", filename)\n            with open(out_path, \"wb\") as f:\n                f.write(base64.b64decode(data_b64))\n            image_urls.append(f\"/{out_path}?v={int(time.time())}\")\n\n        return jsonify({\"image_urls\": image_urls})\n\n    except Exception as e:\n        print(\"\u274c Error in Imagen 3 Edit:\", e)\n        return jsonify({\"error\": str(e)}), 500\n</code></pre>"},{"location":"reference/app/#img_gen_ai.app.logout","title":"logout","text":"<pre><code>logout()\n</code></pre> <p>Log out the current admin session.</p> Source code in <code>img_gen_ai/app.py</code> <pre><code>@app.route(\"/logout\")\ndef logout() -&gt; Response:\n    \"\"\"Log out the current admin session.\"\"\"\n    session.pop(\"is_admin\", None)\n    print(\"\ud83d\udc4b Superadmin logged out.\")\n    return redirect(url_for(\"login\"))\n</code></pre>"}]}